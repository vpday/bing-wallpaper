#!/bin/bash

APP_NAME="bing-wallpaper"
JAVA_OPTS="-Xmx128m -Xms128m -Xmn64m -Dfile.encoding=UTF-8"
GITHUB_PATH=vpday/bing-wallpaper
psid=0

if [[ ! -n `command -v curl` ]]; then
    echo "Error: curl command not found. You must be install curl command at first."
    exit 1
fi

if  [[ ! -n `command -v java` ]]; then
    echo "Error: java command not found. You must be install java command at first."
    exit 1
fi

check_pid() {
   java_ps=$(pgrep -f "bing-wallpaper-latest")

   if [ -n "$java_ps" ]; then
      psid=$java_ps
   else
      psid=0
   fi
}

start() {
   check_pid

   if [ $psid -ne 0 ]; then
      echo "================================"
      echo "warn: $APP_NAME already started! (pid=$psid)"
      echo "================================"
   else
      echo "Starting $APP_NAME ..."
      nohup java $JAVA_OPTS -Dapp.env=prod -jar bing-wallpaper-latest.jar --app.env=prod >/dev/null 2>&1 &
      sleep 1
      check_pid
      if [ $psid -ne 0 ]; then
         echo "(pid=$psid) [OK]"
      else
         echo "[Failed]"
      fi
   fi
}

stop() {
   check_pid

   if [ $psid -ne 0 ]; then
      echo -n "Stopping $APP_NAME ...(pid=$psid) "
      kill -9 $psid

      if [ $? -eq 0 ]; then
         echo "[OK]"
      else
         echo "[Failed]"
      fi

      check_pid
      if [ $psid -ne 0 ]; then
         stop
      fi
   else
      echo "================================"
      echo "warn: $APP_NAME is not running"
      echo "================================"
   fi
}

status() {
   check_pid
   if [ $psid -ne 0 ];  then
      echo "$APP_NAME is running! (pid=$psid)"
   else
      echo "$APP_NAME is not running"
   fi
}

show_log() {
    tail -f logs/bing-wallpaper.log
}

get_latest_release() {
    curl --silent "https://api.github.com/repos/$1/releases/latest" | # Get latest release from GitHub api
    grep '"tag_name":' |                                            # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/'                                    # Pluck JSON value
}

upgrade() {
    echo '开始下载最新版本.'

    TAG_VERSION=$(get_latest_release $GITHUB_PATH)
    curl -L -C - -O https://github.com/$GITHUB_PATH/releases/download/$TAG_VERSION/bing-wallpaper.tar.gz

    mkdir upgrade_tmp
    tar -zxf $APP_NAME.tar.gz -C upgrade_tmp

    sh tool stop

    mv resources/application.properties resources/application.properties.bak

    rm -rf lib bing-wallpaper-latest.jar tool resources/static resources/templates
    rm -rf resources/*.properties resources/favicon.ico resources/robots.txt resources/schema.sql

    mv upgrade_tmp/lib .
    mv upgrade_tmp/bing-wallpaper-latest.jar .
    mv upgrade_tmp/tool .
    mv upgrade_tmp/resources/static ./resources
    mv upgrade_tmp/resources/templates ./resources
    mv upgrade_tmp/resources/*.properties ./resources
    mv upgrade_tmp/resources/favicon.ico ./resources
    mv upgrade_tmp/resources/robots.txt ./resources
    mv upgrade_tmp/resources/schema.sql ./resources

    chmod +x tool

    echo '升级完毕, 请执行 sh tool restart 重启！'

    rm -rf upgrade_tmp
    rm -rf bing-wallpaper.tar.gz
}

install() {
    echo '开始下载'

    TAG_VERSION=$(get_latest_release $GITHUB_PATH)
    curl -L -C - -O https://github.com/$GITHUB_PATH/releases/download/$TAG_VERSION/bing-wallpaper.tar.gz
    echo '下载完毕'

    mkdir $APP_NAME
    tar -zxf $APP_NAME.tar.gz -C $APP_NAME
    chmod +x $APP_NAME/tool

    path=$(pwd)
    echo "安装成功，请进入 $(pwd) 目录执行 sh tool start 启动"
}

case "$1" in
   'start')
      start
      ;;
   'stop')
     stop
     ;;
   'restart')
     stop
     start
     ;;
   'status')
     status
     ;;
   'log')
     show_log
     ;;
   'install')
     install
     ;;
   'upgrade')
     upgrade
     ;;
  *)
     echo "Usage: $0 {start | stop | restart | status | install | upgrade | log}"
     exit 1
esac
exit 0
